steps to follow the website: 

Frontend:
========
1. install the npx create-react-app and for css follow the steps https://tailwindcss.com/docs/guides/create-react-app
    md ---> moblie version
    normal thing is desktop version
2. create the assets for store the images
3. install the react-router-dom to handle the routes write the code in index.js:
        import {createBrowserRouter,createRoutesFromElements,Route,RouterProvider} from "react-router-dom";
        const router = createBrowserRouter(
        createRoutesFromElements(
            <Route path="/" element={<App />}>
            {/* <Route index element={<Home />} /> */}
            </Route>
        )
        );
        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(
        <RouterProvider router={router}/>
        );
4. install the npm install react-icons --save and put the user icon in header.js here when we are importing any library fa indicates the which library we are using
5 create the pages folder and give route in index.js and for display in pages folder but it is not giving the so Outlet is import from react-router-dom in app.
6. do the add to cart with count using tailwind css:
 <div className="text-2xl text-slate-600 relative">
            <BsCartFill />
            <div className="absolute -top-1 -right-1 text-white bg-red-500 h-4 w-4 rounded-full m-0 text-sm text-center">
              0
            </div>
          </div>
7. do login with dropdown using tailwind and make usestate and function and change the icon of user:
import { HiOutlineUserCircle } from "react-icons/hi";
 const [showmenu, setShowMenu] = useState(false);
  const handleShowMenu=()=>{
    setShowMenu(prev=>!prev)
  }
 <div className="text-slate-600 " onClick={handleShowMenu}>
            <div className="text-3xl cursor-pointer" >
              <HiOutlineUserCircle />
            </div>
            {showmenu && (
              <div className="absolute right-2 bg-white py-2 px-2 shadow drop-shadow">
                <p className="whitespace-nowrap cursor-pointer">New Product</p>
                <p className="whitespace-nowrap cursor-pointer">Login</p>
              </div>
            )}
          </div>
          8. make the dummuy login page,new product page and improve the css 
          in app.js:
           <main className="pt-16 bg-slate-100 min-h-[calc(100vh)]">
        <Outlet />
      </main> 
      9. create the signup page and add the fields of signup page along with css
      10. implement the functionality signup page:
        i)   const [data, setData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    confirmPassword: "",
  });
  console.log("fasfa", data);
  ii) make a function tohandle and submit the form :
    const handleOnChange = (e) => {
    const { name, value } = e.target;
    setData((prev) => {
      return {
        ...prev,
        [name]: value,
      };
    });
  };
  const handleSubmit=(e)=>{
e.preventDefault();
const {firstName,email,password,confirmPassword}=data;
if(firstName && email && password && confirmPassword){
  if(password===confirmPassword){
    alert("successfully")
  }
  else{
    alert("check the password and confirm password are not equal")
  }
}
else{
  alert("please enter required fields")
}
  }
  iii) add the onChange and On submit and link the login page and add the preventDefault after refresh data is not gone 
  ***** the name and value are same key value like firstName is name and value also data.firstName here firstName is same as value and name******

11. implement the login as same as signup but some fiels are there 
12.add and upload the image in  Frontend
13.cretae the backend and install the library and connect to frontend to backend through link
     frontend:
     =========
    i) const fetchData = await fetch(
          `${process.env.REACT_APP_SERVER_DOMAIN}/signup`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          }
        );
        const datares = await fetchData.json();
        console.log("gahsa", datares);
    ii)i creact the env file REACT_APP_SERVER_DOMAIN=http://localhost:8080
    
    Backend:
    ========

    i)install the cors,express,nodemon,mongoose,dotenv
    ii) make the index.js connect and create and run the server:
    const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");

const app = express();
app.use(cors());
app.use(express.json({ limit: "10mb" }));

const PORT = process.env.PORT || 8080;
app.get("/", (req, res) => {
  res.send("server is connected");
});

app.post("/signup", (req, res) => {
  console.log(req.body);
});
app.listen(PORT, () => {
  console.log("Server is Running at Port:", PORT);
});
 here data is getting in console will we enter the data in frontend
 14. create schema,model when user signup from frontend to store the data from database
i)const dotenv = require("dotenv").config();
ii)connect the server:
mongoose.set("strictQuery", false);
mongoose
  .connect(process.env.MONGODB_URL)
  .then(() => {
    console.log("database is connected");
  })
  .catch((err) => {
    console.log(err);
  });
iii)schema:
const userSchema = mongoose.Schema({
  firstName: String,
  lastName: String,
  email: {
    type: String,
    unique: true,
  },
  password: String,
  confirmPassword: String,
  image: String,
});
iv)model
const userModel = mongoose.model("user", userSchema);
v)app.post("/signup", async (req, res) => {
//   console.log(req.body);
  try {
    const { email } = req.body;
    const data = await userModel.findOne({ email: email });

    // console.log(data);
      if (data) {
        res.send({ message: "Email is already Exists" });
      }
      else{
          const data=userModel(req.body)
          const save=data.save()
          res.send({message:"Successfully Signup"})
      }
  } catch (err) {
    console.log(err);
  }
});